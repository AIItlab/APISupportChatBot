import { NextRequest, NextResponse } from 'next/server';
import nodemailer from 'nodemailer';
import fetch from 'node-fetch';

export async function POST(request: NextRequest) {
  try {
    // Update POST handler to accept new fields
    const { userEmail, messages, timestamp, apiUserId, organizationId, url, environment, paymentType } = await request.json();

    // Validate required fields
    if (!userEmail || !messages || !Array.isArray(messages) || messages.length === 0) {
      return NextResponse.json(
        { error: 'User email and chat history are required' },
        { status: 400 }
      );
    }

    // Format the support email content to show the full conversation history
    const conversationHtml = messages.map((msg: any, idx: number) => {
      if (msg.role === 'user') {
        return `<div style="margin-bottom:10px;"><span style="color:#1e40af;font-weight:bold;">User:</span> <span style="color:#374151;">${msg.content.replace(/\n/g, '<br>')}</span></div>`;
      } else if (msg.role === 'assistant') {
        return `<div style="margin-bottom:10px;"><span style="color:#f59e0b;font-weight:bold;">Chatbot:</span> <span style="color:#374151;">${msg.content.replace(/\n/g, '<br>')}</span></div>`;
      } else {
        return '';
      }
    }).join('');

    const emailContent = `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; background-color: #f8fafc;">
        <div style="background: linear-gradient(135deg, #1e40af 0%, #3b82f6 100%); padding: 30px; text-align: center; border-radius: 12px 12px 0 0;">
          <h1 style="color: white; margin: 0; font-size: 24px;">‚úàÔ∏è Jazeera Airways Support Request</h1>
          <p style="color: #fbbf24; margin: 10px 0 0 0; font-size: 16px;">Chatbot Escalation</p>
        </div>
        <div style="background: white; padding: 30px; border-radius: 0 0 12px 12px; box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);">
          <div style="margin-bottom: 25px; padding-bottom: 20px; border-bottom: 2px solid #e5e7eb;">
            <h2 style="color: #1f2937; margin: 0 0 10px 0; font-size: 18px;">üìß Customer Information</h2>
            <p style="margin: 5px 0; color: #374151;"><strong>Email:</strong> ${userEmail}</p>
            <p style="margin: 5px 0; color: #374151;"><strong>Timestamp:</strong> ${new Date(timestamp).toLocaleString()}</p>
            <p style="margin: 5px 0; color: #374151;"><strong>API User Id:</strong> ${apiUserId}</p>
            <p style="margin: 5px 0; color: #374151;"><strong>Organization Id:</strong> ${organizationId}</p>
            <p style="margin: 5px 0; color: #374151;"><strong>URL:</strong> ${url}</p>
            <p style="margin: 5px 0; color: #374151;"><strong>Environment:</strong> ${environment}</p>
            <p style="margin: 5px 0; color: #374151;"><strong>Payment Type:</strong> ${paymentType}</p>
          </div>
          <div style="margin-bottom: 25px; padding-bottom: 20px; border-bottom: 2px solid #e5e7eb;">
            <h2 style="color: #1f2937; margin: 0 0 15px 0; font-size: 18px;">üí¨ Full Conversation History</h2>
            <div style="background: #f3f4f6; padding: 15px; border-radius: 8px; border-left: 4px solid #3b82f6; max-height: 300px; overflow-y: auto;">
              ${conversationHtml}
            </div>
          </div>
          <div style="background: #dbeafe; padding: 20px; border-radius: 8px; border: 1px solid #3b82f6;">
            <h3 style="color: #1e40af; margin: 0 0 10px 0; font-size: 16px;">üìù Action Required</h3>
            <p style="margin: 0; color: #374151;">The customer was not satisfied with the chatbot response and has requested human support. Please reach out to them directly at <strong>${userEmail}</strong> within 24 hours.</p>
          </div>
          <div style="text-align: center; margin-top: 30px; padding-top: 20px; border-top: 1px solid #e5e7eb;">
            <p style="color: #6b7280; font-size: 14px; margin: 0;">
              This email was automatically generated by the Jazeera Airways API Chatbot Support System
            </p>
          </div>
        </div>
      </div>
    `;
    // (removed duplicate declaration of emailContent)
    // (removed duplicate declaration of emailContent)

    // Try nodemailer first
    let emailSent = false;
    let nodemailerError: any = null;
    try {
      const transporter = nodemailer.createTransport({
        service: 'gmail',
        host: 'smtp.gmail.com',
        port: 587,
        secure: false,
        auth: {
          user: process.env.SENDGRID_USER,
          pass: process.env.SENDGRID_PASS
        },
        tls: {
          rejectUnauthorized: false
        }
      });
      await transporter.verify();
      await transporter.sendMail({
        // from: `"Jazeera Airways Chatbot" <${process.env.SENDGRID_USER}>`,
       from: `"Jazeera Airways Chatbot" <${process.env.SMTP_HOST}>`,
        
        to: process.env.SUPPORT_EMAIL,
        subject: `üö® Chatbot Support Request - ${userEmail}`,
        html: emailContent
      });
      emailSent = true;
    } catch (err: any) {
      nodemailerError = err;
      console.error('Nodemailer failed:', err);
    }

    // Fallback: Try SendGrid API if nodemailer fails
    if (!emailSent) {
      try {
        const sgRes = await fetch('https://api.sendgrid.com/v3/mail/send', {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${process.env.SENDGRID_API_KEY}`,
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            personalizations: [{ to: [{ email: process.env.SUPPORT_EMAIL }], subject: `üö® Chatbot Support Request - ${userEmail}` }],
            from: { email: process.env.SENDGRID_USER, name: 'Jazeera Airways Chatbot' },
            content: [{ type: 'text/html', value: emailContent }],
          })
        });
        if (!sgRes.ok) {
          const sgText = await sgRes.text();
          throw new Error(`SendGrid API error: ${sgRes.status} ${sgText}`);
        }
        emailSent = true;
      } catch (sgErr: any) {
        console.error('SendGrid API failed:', sgErr);
        if (nodemailerError) {
          throw new Error(`Nodemailer failed: ${nodemailerError.message}; SendGrid failed: ${sgErr.message}`);
        } else {
          throw sgErr;
        }
      }
    }


    return NextResponse.json({ 
      success: true, 
      message: 'Support request sent successfully' 
    });

  } catch (error: any) {
    console.error('Support email error details:', {
      message: error.message,
      code: error.code,
      response: error.response,
      stack: error.stack
    });
    
    return NextResponse.json(
      {
        error: 'Failed to send support request',
        details: error.message,
        code: error.code,
        response: error.response,
        stack: error.stack,
        nodemailerError: error.nodemailerError,
        sendgridError: error.sendgridError,
      },
      { status: 500 }
    );
  }
}
